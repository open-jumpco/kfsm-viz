@startuml
state coins {
COINS --> UNLOCKED : <<automatic>>[{coins > requiredCoins}] :: { returnCoin(coins-requiredCoins); unlock(); reset(); }
COINS --> UNLOCKED : <<automatic>>[{coins == requiredCoins}] :: { unlock(); reset(); }
COINS --> COINS : COIN :: { coin(it); if(coins < requiredCoins){ println("Please add ${requiredCoins-coins}"); }; }
}
state default {
LOCKED --> COINS : COIN :: { coin(it); unlock(); reset(); }
LOCKED --> COINS : COIN[{requiredCoins >= coins+(it?:error("argument required"))}] :: { coin(it); println("Coins=$coins, Please add ${requiredCoins-coins}"); }
UNLOCKED --> UNLOCKED : COIN :: { returnCoin(coin(it)); }
UNLOCKED --> LOCKED : PASS :: { lock(); }
}
@enduml
